#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\rightmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\emph on
\noun on
POLITECNICO DI MILANO
\end_layout

\begin_layout Standard
\align center

\emph on
\noun on
SCUOLA DI INGEGNERIA DELL’INFORMAZIONE
\end_layout

\begin_layout Standard
\align center

\emph on
\noun on
CORSO DI LAUREA MAGISTRALE IN INGEGNERIA INFORMATICA
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename img/Logo_Politecnico_Milano.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size giant
SOCIAL WIRELESS - STM32F4
\end_layout

\begin_layout Standard
\align center

\size larger
Progetto di real time operating systems
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\align center

\size largest
Sebastiano Mariani, Fabio Gritti
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduzione
\end_layout

\begin_layout Standard
Lo scopo principale del progetto è quello di sviluppare un driver che permetta
 di utilizzare il transceiver wi-fi NRF24L01P dalla board STM32F4_Discovery.
 Una volta sviluppato tale modulo è prevista l'integrazione con i lavori
 svolti dai colleghi per permettere l'utilizzo nel contesto voluto dalla
 traccia.
 ( comunicazione bidirezionale dei passi fatti e feedback audio tra due
 dispostivi che si trovano nelle vicinanze )
\end_layout

\begin_layout Standard
I moduli integrati all'interno del nostro lavoro sono:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
item 
\backslash
textbf{Wifi:}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item  Thread che permette la comunicazione wifi tra due dispostivi vicini
 
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Podometro:}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item  Thread che si occupa di rilevare
\end_layout

\begin_layout Plain Layout

				   e contare i passi fatti
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Suono:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Libreria che permette di avere feedback audio
\end_layout

\begin_layout Plain Layout

				  circa la vittoria o la sconfitta in base al numero di passi effettuati
 ed 
\end_layout

\begin_layout Plain Layout

				  una indicazione del numero di passi fatti fino a quel momento
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Note e Strumenti utilizzati
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Note:}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item  Nel contesto dell'applicazione vengono trasmessi solo il numero di
 passi effettuati, ragion per cui si è scelto di fissare il payload in modo
 statico a 4 byte.
 
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Il thread di valutazione statistiche del modulo podometro non è stato
 attivato dato che per il livello di integrazione fatto risultava superfluo
 ( è possibile comunque attivarlo senza problemi )
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Strumenti Utilizzati:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item STM32F4 Discovery: board con architettura ARM a 32 bit, fornitaci da
 STMicroelectronics©
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Software per il controllo di versione git con repository remota hostata
 sul portale Github 
\end_layout

\begin_layout Plain Layout

	
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Modulo wifi NRF24L01P prodotto da Nordic Semiconductor©
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Sistema operativo open source per sistemi embedded Miosix sviluppato
 dall'Ing.
 Federico Terraneo
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item QSTLink2: programma sviluppato da STMicroelectronics© che permette
 di flashare eseguibili sulla board
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Cavo seriale
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Funzionamento NRF24L01P
\end_layout

\begin_layout Standard
Mostriamo in questa sezione l'automa a stati finiti che riassume le varie
 fasi di lavoro del transceiver wifi, descrivendo successivamente come il
 nostro codice si comporta rispetto a questo.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/Automa nRF24L01.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Schema di funzionamento NRF24L01P
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il codice è stato strutturato in questo modo: 
\end_layout

\begin_layout Itemize
Passaggio da stato Power down a stato Standby I tramite funzione 
\emph on
powerUp()
\end_layout

\begin_layout Itemize
Passaggio da Stabdby I a RX mode tramite funzione 
\emph on
setReceiveMode()
\end_layout

\begin_layout Itemize
Passaggio da RX mode a TX mode passando da Standby I tramite funzione 
\emph on
TrasmitData()
\emph default
 che al suo interno invoca la funzione 
\emph on
setTransmitMode()
\end_layout

\begin_layout Itemize
Il passaggio da TX Mode a RX mode viene affidato sempre alla funzione 
\emph on
TrasmitData()
\emph default
, la quale quando conclude la trasmissione si preoccupa di riportare lo
 stato del modulo in RX mode passando da StandbyI
\end_layout

\begin_layout Standard
Per rendere più semplice il codice questo è stato pensato affinchè si evitasse
 il passaggio allo stato Standby II che, come riportato nel reference manual
 di NRF24L01P, risulta essere uno stato ibrido ( Non si ha niente da trasmettere
 ma sono in trasmissione ) .
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Descrizione Classi
\end_layout

\begin_layout Standard
In questa sezione viene data una breve overview delle classi create, successivam
ente verrà spiegato come i thread si sincronizzano per arrivare al risultato
 descitto nell'introduzione.
 Le varie classi sono state suddivise in cartelle, una per modulo, per rendere
 più comprensibile la struttura del progetto e di conseguenza renderla più
 navigabile.
 La suddivisione è la seguente:
\end_layout

\begin_layout Itemize
Wifi-Module
\end_layout

\begin_layout Itemize
Pedometer
\end_layout

\begin_layout Itemize
Speaker + suoni (cartella contenente i campioni dei suoni utilizzati)
\end_layout

\begin_layout Subsection
Wifi-Module
\end_layout

\begin_layout Standard
Contiene tutte le classi C++ per il funzionamento del transceiver NRF24L01P,
 più alcuni file utili a scopi di debugging.
 Nello sviluppo di questo modulo si è cercato di mantenere una linea molto
 semplice ed intuitiva in modo da permettere ad eventuali sviluppatori futuri
 di usare la classe con facilità.
 ( Sono stati inseriti numerosi commenti nei passi più critici ) 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{NRF24L01P:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe contenente le funzioni strettamente legate al setup e alle operazion
i per permettere la trasmissione dei dati wireless.
 Nel file header sono state definite tutte le macro che permettono un utilizzo
 user-friendly dei registri e delle istruzioni di configurazione.
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Spi:} implementa un driver minimale per trasmettere i dati al modulo
 wifi tramite l'interfaccia spi della board.
 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item costruttore: esegue il setup del bus spi in modalità full-duplex
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item send(int data): permette di inviare dati tramite bus spi
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item receive(): permette di ricevere dati tramite bus spi
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{exorcizo.cpp:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item binario che compie un reset di tutti i registri della board.
 Molto utile in fase di debug
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{mainRX.cpp - mainTX.cpp:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item files C++ derivanti da una prima versione del progetto in cui una board
 si occupava solamente della trasmissione e l'altra solo della ricezione.
\end_layout

\begin_layout Plain Layout

Molto utile per capire a fondo i meccanismi del modulo Wifi
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Pedometer
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Pedometer:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe contenente le funzioni che permettono il setup iniziale del
 podometro e la lettura dei dati rilevati.
 
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{lis302dl:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Si occupa del setup dell'accellerometro per la rivelazione dei movimenti
 sui 3 assi cartesiani
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{stats:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe in grado di ricavare statistiche, come ad esempio il calcolo
 delle calorie consumate
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Speaker
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{Player:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe contenente le funzioni che permettono lo stream corretto dell'audio
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{slice-and-play:} 
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item Mette a disposizione le funzioni che permettono di avere feedback audio
 di vittoria, sconfitta e di speaking del numero di passi fatti.
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	
\backslash
item 
\backslash
textbf{convert:}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin {itemize}
\end_layout

\begin_layout Plain Layout

			
\backslash
item classe in grado di convertire i file campionati da formato .wav a formato
 .h per un eventuale aggiunta di nuovi suoni.
\end_layout

\begin_layout Plain Layout

		
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Threads e Sincronizzazione
\end_layout

\begin_layout Standard
In questa ultima parte del documento spieghiamo come sono stati integrati
 tra di loro i moduli per raggiungere la funzionalità richiesta dal dispositivo
 in sviluppo.
 Per implementare lo stato di ricezione/trasmissione pseudo-contemporanea
 sono stati utilizzati due thread che contendono una mutex ( 'modality'
 ).
 Tale mutex si occupa di arbitrare l'accesso al transceiver garantendo la
 configurazione in mutua esclusione tra ricezione e trasmissione.
 I due thread utilizzati dal nostro modulo sono: 
\end_layout

\begin_layout Itemize

\emph on
send_handler(void* arg)
\emph default
: Si occupa di passare in stato di trasmissione e di trasmettere ogni secondo
\end_layout

\begin_layout Itemize

\emph on
irq_handler(void* arg)
\emph default
: rimane in attesa di un interrupt di ricezione; quando questo si verifica
 si occupa di effettuare il confronto tra i dati ricevuti ed il numero di
 passi corrente rilevati dal podometro e successivamente richiama la corrisponde
nte funzione dello speaker per informare l'utente della sua vittoria/sconfitta.
\end_layout

\begin_layout Standard
Sono stati mascherati gli interrupt di trasmissione ( 
\emph on
TX_DS
\emph default
 ) e di massimo numero di ritrasmissioni raggiunte ( 
\emph on
MAX_RT
\emph default
 ) perchè poco utili al fine del progetto.
 Seguno ora i flow-chart che descrivono dettagliatamente come i thread di
 trasmissione e ricezione cooperano all'interno del sistema.
\end_layout

\begin_layout Subsection
Thread Send_handler 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename img/Trasmissione.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Flow chart thread trasmissione
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Thread Irq_handler
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename img/Ricezione.png
	scale 80

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Flow chart thread ricezione
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bottone 
\end_layout

\begin_layout Standard
Come ultima feature del sistema è stato aggiunto un thread in attesa di
 un interrupt da parte del bottone ( blu sulla board ).
 Quando questo si verifica viene richiamata la funzione dello speaker che
 riproduce il numero di passi fatti fino a quel momento.
\end_layout

\begin_layout Subsection
Overview generale 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/overview.jpg
	scale 55

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Schema generale
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Conclusioni
\end_layout

\begin_layout Standard
Come già ripetuto più volte si è cercato di mantenere il codice più semplice
 e pulito possibile rispetto al contesto dell'applicazione sviluppata; l'impleme
ntazione fatta risulta essere abbastanza riduttiva rispetto alle potenzialità
 del modulino wifi, sono infatti rimaste inutilizzate feature come : multiceiver
, payload dinamico, ack e ritrasmissioni automatiche; Non si riteneva tuttavia
 necessario l'utilizzo di queste per il progetto in questione.
 Il codice prodotto risulta essere comunque un buon punto di partenza per
 implementare una generica applicazione che richieda una trasmissione wifi
 di dati, con delle piccole modifiche alla classe è possibile implementare
 tutte le funzionalità mancanti senza troppi problemi.
\end_layout

\begin_layout Section
Ringraziamenti
\end_layout

\begin_layout Standard
Si ringraziano le seguenti persone che hanno sviluppato il codice di speaker
 e podometro e che hanno reso possibile la creazione del dispositivo descritto
 in questo documento:
\end_layout

\begin_layout Itemize
Andrea Piscitello - Giada Tacconelli ( Podometro )
\end_layout

\begin_layout Itemize
Marco Mezzanotte - Filippo Garetti - Tommaso Calcina ( Speaker ) 
\end_layout

\end_body
\end_document
